@page "/chat";
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<PageTitle>Chat</PageTitle>

@if (IsConnected)
{
    <input type="text" @bind="userInput" placeholder="displayname"/>
    <input type="text" @bind="messageInput" placeholder="message"/>
    <button @onclick="Send">Send</button>

    <ul id="messagesList">
        @foreach(var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <span>Connecting...</span>
}
<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" size="50"/>
    </label>
</div>


<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
        .Build();

        hubConnection.On<string, string>("RecieveMessage", (user, message) =>
        {
            var encodedMessage = $"{user}: {message}";
            messages.Add(encodedMessage);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() => hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

}
